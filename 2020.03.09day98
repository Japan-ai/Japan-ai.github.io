✔️Done list
・Gitでファイル修正、再アップロード
　　すでにリポジトリは作成しているので、再度cloneする必要はない。
　　cloneは初回の一度だけ、リモートリポジトリからローカルにコピーするのに実施。
　　その後は基本的に以下のサイクルで開発を行う。
1. ローカルの端末上で、開発用の新しいブランチ(branch）を作成する
　　git checkout -b some_branch
2. branch上でソースの修正や作成を行い、新規機能やバグ修正を行う
3. branch上でコミットは都度実施
　　git add .
　　git commit -m 'nantoka kantoka'
4. ある程度まとまったタイミングで、リモート（GitHub）にpush
　　git push -u
5. 実装が終われば、GitHub上でプルリクエストを作成
6. レビューや確認が終わって、GitHub上でmasterにマージ
7. git pullして、リモート上のmasterの状態をローカルに取り込む 

・Git インプット Udemy
・Laravel インプット

✔️TIL
・Gitでファイル修正、再アップロード
　　すでにリポジトリは作成しているので、再度cloneする必要はない。
　　cloneは初回の一度だけ、リモートリポジトリからローカルにコピーするのに実施。
　　その後は基本的に上記のサイクルで開発を行う。
・gitconfig　
　　gitの設定ファイル。何段階かのレベルがある。
　　~/.gitconfig はユーザの設定、あとシステム全体、リポジトリ自体の設定というように。
　　今は一旦上記設定できていたらOK

✔️more

✔️Output rate
✔️メンターからのアドバイス
★Dockerファイルの設定(作成)について★
イメージのビルドの際に、イメージの中身に何を用意すべきか
↓
どんな課題を作成するかにもよりますが、Webとデータベースを連携した一般的なWebアプリケーションですね？であれば、Web（PHP）コンテナとデータベースのDockerコンテナを２つ用意してそれぞれが連携する形になると思います。コンテナ連携には、docker-compose というのを使います。

フレームワークとしてLaravelを利用するということですので、WebコンテナのイメージにはLaravelが利用できるようにしないといけません。
具体的には、最低限以下の２つぐらいでいいかなと思います。
・Webコンテナで、git を使えるようにする
・ WEbコンテナ内で、Composer を使えるようにする
