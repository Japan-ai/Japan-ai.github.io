✔️Done list
【大枠】ユーザー認証機能(ログインしたユーザーは自分のフォルダのタスクだけを閲覧できる機能)の実装

- ログオン前とログイン後のヘッダーの実装(views/layout.blade.phpの記述)
- ログアウト処理
- ミドルウェアを用いてログイン認証を実装(ログインしないとフォルダやタスクの作成・閲覧ページにアクセスできないよう実装)
- 「ログインユーザーのデータ」として(=ユーザーとして)「フォルダの新規作成」行えるようにする」ためのControllerの記述(FolderController.phpの記述)
- 「ログインユーザーのデータ」として(=ユーザーとして)「チャレンジリストの新規作成」行えるようにする」ためのControllerの記述(ChallengeListController.phpの記述)
- ログイン後、必ずホームページに遷移するのではなく、フォルダを作成済みであればチャレンジリスト一覧ページにリダイレクト、一つもフォルダを作成していなければフォルダ作成ページへのリンクを含んだホームページをレスポンスさせるように実装(HomeController.phpの記述

- パスワードの再設定機能(Mailtrapの使用)
- パスワードの再設定のためのViewの記述(resources/views/auth/passwords/reset.blade.phpとresources/views/auth/passwords/email.blade.phpの記述)
- パスワードの再設定のためのControllerの記述(app/Http/Controllers/Auth/ResetPasswordController.phpの記述)
- バリデーションメッセージを日本語化(validation.php・passwords.phpの記述)
- パスワード再登録メールの内容を変更のためのModel(クラス)の作成(app/Mail/ResetPassword.phpの新規作成・記述)


✔️TIL
・レスポンスステータスコード
・abort関数(Laravel でエラー系（400番台 / 500番台）のレスポンスを返却する方法)
・ルートモデルバインディング(Web アプリケーションでありがちな処理をまとめてフレームワーク側で対応する機能。ルーティングで定義された URL から自動的にデータを取得し、モデルクラスインスタンスをコントローラーメソッドに渡す)(Laravel は、ルーティング定義の URLの中括弧で囲まれたキーワード（{folder}）とコントローラーメソッドの仮引数名（$folder）が一致していて、かつ引数が型指定（Folder）されていれば、URL の中括弧で囲まれた部分の値を IDとみなし、自動的に引数の型のモデルクラスインスタンスを作成。ルートとモデルを結びつける（バインディング）機能。)
・ポリシークラス(Larvelの認可を司る)(403表示で使用)
・view メソッド
・リレーションが存在しない＝タスク編集ルートの URL にはフォルダ ID および タスク ID が含まれていますが、このフォルダ ID とタスク ID がちぐはぐで紐づいていなかったら404エラー
・checkRelationメソッド

✔️more

✔️Output rate
95%
